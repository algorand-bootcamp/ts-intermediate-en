#pragma version 9

// This TEAL was generated by TEALScript v0.46.1
// https://github.com/algorand-devrel/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its repsective branch will be "NOT_IMPLMENTED" which just contains "err"
txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_NoOp call_OptIn call_CloseOut

NOT_IMPLEMENTED:
	err

// createApplication(string)void
abi_route_createApplication:
	// proposal: string
	txna ApplicationArgs 1
	extract 2 0

	// execute createApplication(string)void
	callsub createApplication
	int 1
	return

createApplication:
	proto 1 0

	// contracts/dao.algo.ts:16
	// this.proposal.value = proposal
	byte "proposal"
	frame_dig -1 // proposal: bytes
	dup
	len
	itob
	extract 6 2
	swap
	concat
	app_global_put
	retsub

// bootstrap()uint64
abi_route_bootstrap:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// execute bootstrap()uint64
	callsub bootstrap
	int 1
	return

bootstrap:
	proto 1 0

	// contracts/dao.algo.ts:20
	// verify sender
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	assert
	==
	assert

	// contracts/dao.algo.ts:21
	// assert(!this.registeredAsaId.exists)
	txna Applications 0
	byte "registeredAsaId"
	app_global_get_ex
	swap
	pop
	!
	assert

	// contracts/dao.algo.ts:22
	// registeredAsa = sendAssetCreation({
	//       configAssetTotal: 1_000,
	//       configAssetFreeze: this.app.address,
	//       configAssetClawback: this.app.address,
	//     })
	itxn_begin
	int acfg
	itxn_field TypeEnum

	// contracts/dao.algo.ts:23
	// configAssetTotal: 1_000
	int 1_000
	itxn_field ConfigAssetTotal

	// contracts/dao.algo.ts:24
	// configAssetFreeze: this.app.address
	txna Applications 0
	app_params_get AppAddress
	assert
	itxn_field ConfigAssetFreeze

	// contracts/dao.algo.ts:25
	// configAssetClawback: this.app.address
	txna Applications 0
	app_params_get AppAddress
	assert
	itxn_field ConfigAssetClawback

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn CreatedAssetID
	frame_bury -1 // registeredAsa: asset

	// contracts/dao.algo.ts:27
	// this.registeredAsaId.value = registeredAsa
	byte "registeredAsaId"
	frame_dig -1 // registeredAsa: asset
	app_global_put

	// contracts/dao.algo.ts:28
	// return registeredAsa;
	frame_dig -1 // registeredAsa: asset
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// optInToApplication(asset)void
//
// // eslint-disable-next-line no-unused-vars
abi_route_optInToApplication:
	// registeredASA: asset
	txna ApplicationArgs 1
	btoi
	txnas Assets

	// execute optInToApplication(asset)void
	callsub optInToApplication
	int 1
	return

optInToApplication:
	proto 1 0

	// contracts/dao.algo.ts:33
	// assert(this.txn.sender.assetBalance(this.registeredAsaId.value) === 0)
	txn Sender
	byte "registeredAsaId"
	app_global_get
	asset_holding_get AssetBalance
	assert
	int 0
	==
	assert

	// contracts/dao.algo.ts:34
	// sendAssetTransfer({
	//       xferAsset: this.registeredAsaId.value,
	//       assetReceiver: this.txn.sender,
	//       assetAmount: 1,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/dao.algo.ts:35
	// xferAsset: this.registeredAsaId.value
	byte "registeredAsaId"
	app_global_get
	itxn_field XferAsset

	// contracts/dao.algo.ts:36
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/dao.algo.ts:37
	// assetAmount: 1
	int 1
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/dao.algo.ts:39
	// sendAssetFreeze({
	//       freezeAsset: this.registeredAsaId.value,
	//       freezeAssetAccount: this.txn.sender,
	//       freezeAssetFrozen: true,
	//     })
	itxn_begin
	int afrz
	itxn_field TypeEnum

	// contracts/dao.algo.ts:40
	// freezeAsset: this.registeredAsaId.value
	byte "registeredAsaId"
	app_global_get
	itxn_field FreezeAsset

	// contracts/dao.algo.ts:41
	// freezeAssetAccount: this.txn.sender
	txn Sender
	itxn_field FreezeAssetAccount

	// contracts/dao.algo.ts:42
	// freezeAssetFrozen: true
	int 1
	itxn_field FreezeAssetFrozen

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

forgetVote:
	proto 0 0

	// if0_condition
	// contracts/dao.algo.ts:47
	// this.inFavor(this.txn.sender).exists
	txn Sender
	txna Applications 0
	byte "inFavor"
	app_local_get_ex
	swap
	pop
	bz if0_end

	// if0_consequent
	// contracts/dao.algo.ts:48
	// this.votesTotal.value = this.votesTotal.value - 1
	byte "votesTotal"
	byte "votesTotal"
	app_global_get
	int 1
	-
	app_global_put

	// if1_condition
	// contracts/dao.algo.ts:49
	// this.inFavor(this.txn.sender).value
	txn Sender
	byte "inFavor"
	app_local_get
	int 0
	getbit
	bz if1_end

	// if1_consequent
	// contracts/dao.algo.ts:50
	// this.votesInFavor.value = this.votesInFavor.value - 1
	byte "votesInFavor"
	byte "votesInFavor"
	app_global_get
	int 1
	-
	app_global_put

if1_end:

if0_end:
	retsub

// closeOutOfApplication(asset)void
//
// // eslint-disable-next-line no-unused-vars
abi_route_closeOutOfApplication:
	// registeredASA: asset
	txna ApplicationArgs 1
	btoi
	txnas Assets

	// execute closeOutOfApplication(asset)void
	callsub closeOutOfApplication
	int 1
	return

closeOutOfApplication:
	proto 1 0

	// contracts/dao.algo.ts:57
	// this.forgetVote()
	callsub forgetVote

	// contracts/dao.algo.ts:59
	// sendAssetTransfer({
	//       xferAsset: this.registeredAsaId.value,
	//       assetSender: this.txn.sender,
	//       assetReceiver: this.app.address,
	//       assetAmount: 1,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/dao.algo.ts:60
	// xferAsset: this.registeredAsaId.value
	byte "registeredAsaId"
	app_global_get
	itxn_field XferAsset

	// contracts/dao.algo.ts:61
	// assetSender: this.txn.sender
	txn Sender
	itxn_field AssetSender

	// contracts/dao.algo.ts:62
	// assetReceiver: this.app.address
	txna Applications 0
	app_params_get AppAddress
	assert
	itxn_field AssetReceiver

	// contracts/dao.algo.ts:63
	// assetAmount: 1
	int 1
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// vote(asset,bool)void
//
// // eslint-disable-next-line no-unused-vars
abi_route_vote:
	// registeredASA: asset
	txna ApplicationArgs 2
	btoi
	txnas Assets

	// inFavor: bool
	txna ApplicationArgs 1
	int 0
	getbit

	// execute vote(asset,bool)void
	callsub vote
	int 1
	return

vote:
	proto 2 0

	// contracts/dao.algo.ts:73
	// assert(this.txn.sender.assetBalance(this.registeredAsaId.value) === 1)
	txn Sender
	byte "registeredAsaId"
	app_global_get
	asset_holding_get AssetBalance
	assert
	int 1
	==
	assert

	// contracts/dao.algo.ts:74
	// assert(!this.inFavor(this.txn.sender).exists)
	txn Sender
	txna Applications 0
	byte "inFavor"
	app_local_get_ex
	swap
	pop
	!
	assert

	// contracts/dao.algo.ts:75
	// this.inFavor(this.txn.sender).value = inFavor
	txn Sender
	byte "inFavor"
	frame_dig -1 // inFavor: bool
	byte 0x00
	int 0
	uncover 2
	setbit
	app_local_put

	// contracts/dao.algo.ts:77
	// this.votesTotal.value = this.votesTotal.value + 1
	byte "votesTotal"
	byte "votesTotal"
	app_global_get
	int 1
	+
	app_global_put

	// if2_condition
	// contracts/dao.algo.ts:78
	// inFavor
	frame_dig -1 // inFavor: bool
	bz if2_end

	// if2_consequent
	// contracts/dao.algo.ts:79
	// this.votesInFavor.value = this.votesInFavor.value + 1
	byte "votesInFavor"
	byte "votesInFavor"
	app_global_get
	int 1
	+
	app_global_put

if2_end:
	retsub

// getProposal()string
abi_route_getProposal:
	// execute getProposal()string
	callsub getProposal
	int 1
	return

getProposal:
	proto 0 0

	// contracts/dao.algo.ts:84
	// return this.proposal.value;
	byte "proposal"
	app_global_get
	extract 2 0
	dup
	len
	itob
	extract 6 2
	swap
	concat
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// getRegisteredASA()uint64
abi_route_getRegisteredASA:
	// execute getRegisteredASA()uint64
	callsub getRegisteredASA
	int 1
	return

getRegisteredASA:
	proto 0 0

	// contracts/dao.algo.ts:88
	// return this.registeredAsaId.value;
	byte "registeredAsaId"
	app_global_get
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// getVotes()(uint64,uint64)
abi_route_getVotes:
	// execute getVotes()(uint64,uint64)
	callsub getVotes
	int 1
	return

getVotes:
	proto 0 0

	// contracts/dao.algo.ts:92
	// return [this.votesInFavor.value, this.votesTotal.value];
	byte "votesInFavor"
	app_global_get
	itob
	byte "votesTotal"
	app_global_get
	itob
	concat
	byte 0x151f7c75
	swap
	concat
	log
	retsub

create_NoOp:
	method "createApplication(string)void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "bootstrap()uint64"
	method "vote(bool,asset)void"
	method "getProposal()string"
	method "getRegisteredASA()uint64"
	method "getVotes()(uint64,uint64)"
	txna ApplicationArgs 0
	match abi_route_bootstrap abi_route_vote abi_route_getProposal abi_route_getRegisteredASA abi_route_getVotes
	err

call_OptIn:
	method "optInToApplication(asset)void"
	txna ApplicationArgs 0
	match abi_route_optInToApplication
	err

call_CloseOut:
	method "closeOutOfApplication(asset)void"
	txna ApplicationArgs 0
	match abi_route_closeOutOfApplication
	err